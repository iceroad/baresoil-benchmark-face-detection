div(class='row')
  div(class='col-xs-12 col-md-6 col-md-offset-1 bottom-spacer')
    table(class='links-box')
      tr
        td #[span Demo]
        td #[+ExtLinkOwned('https://faces.baresoil.cloud', 'faces.baresoil.cloud')]
      tr
        td Code and data
        td #[+ExtLinkOwned('https://github.com/iceroad/baresoil-benchmark-face-detection', 'iceroad/baresoil-benchmark-face-detection')]
      tr
        td Homepage
        td #[a(href='https://www.baresoil.org') www.baresoil.org]

      tr
        td Other benchmarks
        td #[a(href='https://iceroad.github.io/baresoil-benchmark-image-resizer/') Image Resizing]

    h3 Introduction
    p.
      A recent positive development in #[+ExtLinkWiki('Machine_learning', 'machine learning')]
      has been the availability of fast and accurate methods for detecting
      and recognizing human faces in an image. Given a photograph,
      we would like to know where the human faces (if any) are located in the photograph,
      as well as the approximate shape of each face. This is an import
      first step for #[+ExtLinkWiki('Face_recognition', 'face recognition')],
      #[+ExtLinkWiki('Biometrics', 'biometrics')], and instant messaging apps
      that allow animal parts to be overlaid onto human faces.

    p.
      #[+ExtLinkOwned('https://www.baresoil.org/', 'Baresoil')] can be used to quickly
      turn standard command-line programs into scalable web services. For this
      benchmark, Adam Geitgey's #[+ExtLink('https://medium.com/@ageitgey/machine-learning-is-fun-part-4-modern-face-recognition-with-deep-learning-c3cffc121d78', 'Modern Face Recognition with Deep Learning')] Python tutorial is adapted into a Baresoil
      server-side function using approximately
      #[+ExtLinkOwned('https://github.com/iceroad/baresoil-benchmark-face-detection/blob/master/project/server/face_detect.py', '100 lines of Python')]
      from the tutorial.

    +Figure('assets/overview.png', 'The images on the right show the location of facial features extracted from each face found in the left image. Each yellow box represents a face, and facial features are outlined in red.')

    p.
      The adapted code is deployed to a Baresoil cluster consisting of
      #[strong= extVariables.server.instances.count] #[strong=extVariables.server.instances.type + ' AWS EC2 instances'].
      As of #[strong(class='format-short-date', data-date=extVariables.runStartTime)= extVariables.runStartTime], the
      overall throughput of this cluster was measured at
      #[strong(class='format-number')= analysis.Aggregates.bottomLine.imageDataPerHourGB]
      #[strong gigabytes per hour] of image data analyzed for faces, for a total cost
      of #[strong= '$' + analysis.Aggregates.bottomLine.costPerHourRetail] USD per hour.
      The code and data repository contains the
      #[+ExtLinkOwned('https://github.com/iceroad/baresoil-benchmark-face-detection/tree/master/project', 'Baresoil adaptation')]
      of Adam Geitgey's tutorial.

  //-
  //- SUMMARY
  //-
  div(class='col-xs-12 col-md-4')
    h3 Summary

    table(class='table table-compact metrics-table')
      tr
        td Images processed per hour
        td(class='metric format-number')= analysis.Aggregates.bottomLine.imagesPerHour

      tr
        td Image data processed per hour
        td(class='metric')
          span(class='format-number')= analysis.Aggregates.bottomLine.imageDataPerHourGB
          strong  GB

      tr
        td Cluster cost per hour (on-demand)#[sup *]
        td(class='metric')
          span= '$' + analysis.Aggregates.bottomLine.costPerHourRetail
          strong  USD

      tr
        td Cluster cost per hour (reserved)
        td(class='metric')
          span= '$' + analysis.Aggregates.bottomLine.costPerHourReserved
          strong  USD
    p.
      #[sup *] Using #[strong= extVariables.server.instances.count]
      on-demand EC2
      #[strong= extVariables.server.instances.type]
      instances  in #[strong= extVariables.server.region], priced at
      $#[strong= extVariables.server.instances.costPerHour.retail] per hour,
      RDS on-demand costs of $#[strong= extVariables.server.rds.costPerHour]
      per hour, ELB costs of $#[strong= extVariables.server.elb.costPerHour]
      per hour and $#[strong= extVariables.server.elb.costPerGB] per gigabyte
      transferred. Pixel resolution of all test images is approximately 3840x2160
      (i.e., 4K video frame).
